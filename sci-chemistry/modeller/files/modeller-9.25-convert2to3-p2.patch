--- modeller-9.25/modlib/modeller/automodel/generate.py	(original)
+++ modeller-9.25/modlib/modeller/automodel/generate.py	(refactored)
@@ -88,11 +88,11 @@
                 to_rebuild.append(r)
                 _unbuild_ring(r, ring_atoms + extra_atoms)
     if len(to_rebuild) > 0:
-        print("The following %d residues contain 6-membered rings with "
+        print(("The following %d residues contain 6-membered rings with "
               "poor geometries\nafter transfer from templates. Rebuilding "
               "rings from internal coordinates:\n   %s" \
               % (len(to_rebuild),
-                 "\n   ".join([str(r) for r in to_rebuild])))
+                 "\n   ".join([str(r) for r in to_rebuild]))))
         mdl.build(initialize_xyz=False, build_method='INTERNAL_COORDINATES')
 
 def read_xyz(mdl, aln):
--- modeller-9.25/modlib/modeller/automodel/loopmodel.py	(original)
+++ modeller-9.25/modlib/modeller/automodel/loopmodel.py	(refactored)
@@ -105,7 +105,7 @@
         lendef = len(self._defined_indices)
         if lenall > lendef:
             s = selection(self) - s
-            print("""
+            print(("""
 The following %d atoms were not found in the input model's non-loop region,
 and were added automatically by Modeller in order to determine correct
 interactions between the loop and the rest of the protein:
@@ -115,7 +115,7 @@
 rest of the protein may exist (note, however, that the score of the loop does
 not include protein-protein internal interactions, so will not be adversely
 affected by any clashes).""" \
-% (lenall - lendef, ", ".join([repr(a) for a in s])))
+% (lenall - lendef, ", ".join([repr(a) for a in s]))))
 
             if self.loop.write_defined_only:
                 print("""
@@ -406,7 +406,7 @@
         elif len(atmsel.only_no_topology()) > 0:
             raise ModellerError("some selected residues have no topology")
         else:
-            print("%d atoms selected for loop refinement" % len(atmsel))
+            print(("%d atoms selected for loop refinement" % len(atmsel)))
         return atmsel
 
     def optimize_loop(self, atmsel, sched, actions):
--- modeller-9.25/modlib/modeller/mmcif/writer.py	(original)
+++ modeller-9.25/modlib/modeller/mmcif/writer.py	(refactored)
@@ -4,7 +4,7 @@
 # which works as far back as 2.3, so imports need to be protected by a
 # version check
 
-from __future__ import print_function
+
 import sys
 import textwrap
 
@@ -12,7 +12,7 @@
 if sys.version_info[0] >= 3:
     _long_type = int
 else:
-    _long_type = long
+    _long_type = int
 
 class _LineWriter(object):
     def __init__(self, writer, line_len=80):
--- modeller-9.25/modlib/modeller/optimizers/builtin_optimizer.py	(original)
+++ modeller-9.25/modlib/modeller/optimizers/builtin_optimizer.py	(refactored)
@@ -9,7 +9,7 @@
         # delete the key entirely, as __getstate__ must return a non-empty
         # dict in order for our __setstate__ method to be called).
         d = self.__dict__.copy()
-        for key in self.__dict__.keys():
+        for key in list(self.__dict__.keys()):
             if key.endswith("_modpt") or key.endswith("__optpt"):
                 d[key] = None
         return d
@@ -21,7 +21,7 @@
         vars = params.copy()
         self._update_params(vars, ok_keys, extravars)
         for key in ok_keys:
-            if key not in vars.keys() \
+            if key not in list(vars.keys()) \
                and key not in ("edat", "libs", "actions", "schedule_scale"):
                 raise ValueError("a value must be given for %s" % key)
 
--- modeller-9.25/modlib/modeller/optimizers/optimizer.py	(original)
+++ modeller-9.25/modlib/modeller/optimizers/optimizer.py	(refactored)
@@ -10,7 +10,7 @@
         return self.atmsel
 
     def _update_params(self, params, ok_keys, vars):
-        for key in vars.keys():
+        for key in list(vars.keys()):
             if key in ok_keys:
                 params[key] = vars[key]
             else:
--- modeller-9.25/modlib/modeller/parallel/data_types.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/data_types.py	(refactored)
@@ -3,7 +3,7 @@
 import sys
 
 try:
-    import cPickle as pickle
+    import pickle as pickle
 except ImportError:
     import pickle
 
--- modeller-9.25/modlib/modeller/parallel/job.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/job.py	(refactored)
@@ -106,7 +106,7 @@
         if id and id in pending_slaves:
             slave = pending_slaves.pop(id)
             connected_slaves[id] = slave
-            print("Identified slave %s " % str(slave))
+            print(("Identified slave %s " % str(slave)))
             slave.accept_connection(sock)
             slave.set_directory(self.cwd)
             if sys.path[0] != '':
@@ -117,7 +117,7 @@
             return slave
         elif id and id in connected_slaves:
             slave = connected_slaves[id]
-            print("Reconnect from slave %s " % str(slave))
+            print(("Reconnect from slave %s " % str(slave)))
             slave.accept_connection(sock)
         else:
             print("Ignoring request from unknown slave")
@@ -159,7 +159,7 @@
         """Run all tasks and return all the results, in the same order that they
            were submitted, when all the jobs have completed."""
         tasks = self.tasks[:]
-        print("Running %d tasks on %d slaves" % (len(tasks), len(self)))
+        print(("Running %d tasks on %d slaves" % (len(tasks), len(self))))
         self.push_tasks_to_slaves()
         while True:
             try:
@@ -174,7 +174,7 @@
     def yield_tasks_unordered(self):
         """Run all tasks and return their results (as a generator), in
            whatever order they complete."""
-        print("Running %d tasks on %d slaves" % (len(self.tasks), len(self)))
+        print(("Running %d tasks on %d slaves" % (len(self.tasks), len(self))))
         self.push_tasks_to_slaves()
         while True:
             try:
@@ -215,7 +215,7 @@
                 task = obj.task_results()
                 if task:
                     # The slave completed its task
-                    print("%s on %s completed" % (str(task), str(obj)))
+                    print(("%s on %s completed" % (str(task), str(obj))))
                     if len(self.tasks) > 0:
                         obj.run_task(self.tasks.pop(0))
                     return task
@@ -225,14 +225,14 @@
             except (NetworkError, TaskSetupError):
                 self.kill_slaves((obj,), sys.exc_info()[1])
         else:
-            print("Warning: slave %s reports data, but is not running a task" \
-                  % str(obj))
+            print(("Warning: slave %s reports data, but is not running a task" \
+                  % str(obj)))
 
     def kill_slaves(self, slaves, err=""):
         if err != "":
             err = "(%s) " % err
         for s in slaves:
-            print("%s failed %s- removing from %s" % (s, err, self))
+            print(("%s failed %s- removing from %s" % (s, err, self)))
             task = s.kill()
             if task:
                 self.tasks.append(task)
@@ -248,8 +248,8 @@
         timedout = [a for a in self if a.running_task() and \
                                     a.contact_timeout(self.heartbeat_timeout)]
         if len(timedout) > 0:
-            print("Did not hear from slaves %s in %d seconds" % \
-                  (str(timedout), self.heartbeat_timeout))
+            print(("Did not hear from slaves %s in %d seconds" % \
+                  (str(timedout), self.heartbeat_timeout)))
             self.kill_slaves(timedout)
 
     def push_tasks_to_slaves(self):
@@ -264,8 +264,8 @@
                 slave.run_task(t)
             # If a network error occurred, kill the slave and requeue the task
             except socket.error:
-                print("slave %s failed on run task with %s; removing from job" \
-                      % (slave, sys.exc_info()[1]))
+                print(("slave %s failed on run task with %s; removing from job" \
+                      % (slave, sys.exc_info()[1])))
                 slave.kill()
                 self.tasks.insert(0, t)
         self.expand_for_tasks()
--- modeller-9.25/modlib/modeller/parallel/myspawn.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/myspawn.py	(refactored)
@@ -10,7 +10,7 @@
        ``output``."""
 
     fp = open(output, "w")
-    print("%s >& %s" % (cmd, output))
+    print(("%s >& %s" % (cmd, output)))
     if sys.platform == 'win32':
         _myspawn_win32(cmd, fp)
     else:
@@ -27,4 +27,4 @@
     # Ignore Windows "file not found" errors, so that behavior is consistent
     # between Unix and Windows
     except WindowsError:
-        print("WindowsError: %s (ignored)" % sys.exc_info()[1])
+        print(("WindowsError: %s (ignored)" % sys.exc_info()[1]))
--- modeller-9.25/modlib/modeller/parallel/sge_qsub_array.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/sge_qsub_array.py	(refactored)
@@ -36,7 +36,7 @@
         outlines = output.readlines()
         output.close()
         for line in outlines:
-            print(line.rstrip('\r\n'))
+            print((line.rstrip('\r\n')))
         a.require_clean_exit()
         self._set_jobid(outlines)
 
--- modeller-9.25/modlib/modeller/parallel/sge_qsub_slave.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/sge_qsub_slave.py	(refactored)
@@ -38,7 +38,7 @@
         qsub = "qsub -S /bin/sh -o '%s' -N '%s' %s %s" % \
               (output, name, self.standard_options, self._options)
         cmd = "%s -slave %s" % (path, id)
-        print("%s | %s" % (cmd, qsub))
+        print(("%s | %s" % (cmd, qsub)))
         a = MyPopen4(qsub)
         (input, output) = (a.stdin, a.stdout)
         input.write(cmd + '\n')
@@ -46,7 +46,7 @@
         outlines = output.readlines()
         output.close()
         for line in outlines:
-            print(line.rstrip('\r\n'))
+            print((line.rstrip('\r\n')))
         a.require_clean_exit()
         self._set_jobid(outlines)
 
--- modeller-9.25/modlib/modeller/parallel/slaveloop.py	(original)
+++ modeller-9.25/modlib/modeller/parallel/slaveloop.py	(refactored)
@@ -51,14 +51,14 @@
                         master.send_data(communicator.ErrorWrapper(detail))
                     except socket.error:
                         detail2 = sys.exc_info()[1]
-                        print("Warning: ignored exception " + str(detail2) \
+                        print(("Warning: ignored exception " + str(detail2) \
                               + " when trying to send error state " \
-                              + str(detail) + " back to master")
+                              + str(detail) + " back to master"))
                         raise detail
                 raise
 
     def run(self):
-        print("Slave startup: connect to master at %s" % self.addr)
+        print(("Slave startup: connect to master at %s" % self.addr))
         (host, port, identifier) = self.addr.split(":", 2)
         port = int(port)
         lock = threading.Lock()
--- modeller-9.25/modlib/modeller/top_interpreter/__init__.py	(original)
+++ modeller-9.25/modlib/modeller/top_interpreter/__init__.py	(refactored)
@@ -65,7 +65,7 @@
             if len(line) > 0:
                 try:
                     self._parse_top_ini_line(line.split(None, 4), vars)
-                except TypeError, detail:
+                except TypeError as detail:
                     mod_log_write("read_top__E> " + str(detail))
                     mod_log_write("             top.ini line: " + line)
                     raise
@@ -113,7 +113,7 @@
                 self._set_top_vars(vars)
                 try:
                     fh = self._open_include_file(self.variables['include_file'])
-                except IOError, detail:
+                except IOError as detail:
                     mod_log_write("runlines__E> " + str(detail))
                     mod_log_write("             TOP Command line: " + line)
                     raise
@@ -160,7 +160,7 @@
                     indxca = self._run_top_cmd(cmd, indxca, lines, callstack,
                                                subrout)
                     _modeller.mod_top_post()
-            except (IndexError, SyntaxError, TypeError), detail:
+            except (IndexError, SyntaxError, TypeError) as detail:
                 mod_log_write("runlines__E> " + str(detail))
                 mod_log_write("             TOP Command line: " + line)
                 raise
--- modeller-9.25/modlib/modeller/top_interpreter/topcmds.py	(original)
+++ modeller-9.25/modlib/modeller/top_interpreter/topcmds.py	(refactored)
@@ -19,7 +19,7 @@
         if not isinstance(vars, (list, tuple)):
             vars = (vars,)
         for var in vars:
-            if keys.has_key(var):
+            if var in keys:
                 args.append(keys[var])
             else:
                 args.append(self.vars[var])
--- modeller-9.25/modlib/modeller/top_interpreter/util.py	(original)
+++ modeller-9.25/modlib/modeller/top_interpreter/util.py	(refactored)
@@ -1,7 +1,7 @@
 import _modeller
 
 def set_topvars(topvardict, vars, topini):
-    for name in topvardict.keys():
+    for name in list(topvardict.keys()):
         value = topvardict[name]
         if value is None:
             continue
--- modeller-9.25/modlib/modeller/top_interpreter/variables.py	(original)
+++ modeller-9.25/modlib/modeller/top_interpreter/variables.py	(refactored)
@@ -32,11 +32,11 @@
     def __init__(self, topcmds):
         self._topcmds = topcmds
         self._topvars = {}
-        for var in self._deftops.keys():
+        for var in list(self._deftops.keys()):
             self._ourvars[var] = self._deftops[var]
-        for var in self._edat_members.keys():
+        for var in list(self._edat_members.keys()):
             self._ourvars[var] = self._edat_members[var]
-        for var in self._io_members.keys():
+        for var in list(self._io_members.keys()):
             self._ourvars[var] = self._io_members[var]
 
     def __setitem__(self, key, value):
--- modeller-9.25/modlib/modeller/util/modobject.py	(original)
+++ modeller-9.25/modlib/modeller/util/modobject.py	(refactored)
@@ -1,8 +1,8 @@
 class modobject(object):
     def __setattr__(self, name, val):
         if name not in dir(self):
-            print("runcmd_____W>: creation of new member '%s' in %s: "
-                  "possible typo!" % (name, str(self)))
+            print(("runcmd_____W>: creation of new member '%s' in %s: "
+                  "possible typo!" % (name, str(self))))
         object.__setattr__(self, name, val)
 
     def __getstate__(self):
@@ -11,7 +11,7 @@
         # delete the key entirely, as __getstate__ must return a non-empty
         # dict in order for our __setstate__ method to be called).
         d = self.__dict__.copy()
-        for key in self.__dict__.keys():
+        for key in list(self.__dict__.keys()):
             if key.endswith("_modpt"):
                 d[key] = None
         return d
--- modeller-9.25/modlib/modeller/util/modutil.py	(original)
+++ modeller-9.25/modlib/modeller/util/modutil.py	(refactored)
@@ -17,7 +17,7 @@
         else:
             return indx
     elif isinstance(indx, slice):
-        return range(*indx.indices(len(seqtype)))
+        return list(range(*indx.indices(len(seqtype))))
     elif lookup_func is not None:
         args = lookup_args + (indx,)
         int_indx = lookup_func(*args)
